<!-- index.html v1.0.3 -->
<html><head><base href="/"><!DOCTYPE html>
<head>
    <title>Bot Configuration Manager</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary: #6366f1;
            --primary-dark: #4f46e5;
            --danger: #ef4444;
            --danger-dark: #dc2626;
            --success: #22c55e;
            --gray-50: #f9fafb;
            --gray-100: #f3f4f6;
            --gray-200: #e5e7eb;
            --gray-700: #374151;
            --gray-800: #1f2937;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: var(--gray-50);
            color: var(--gray-800);
            line-height: 1.5;
        }

        .app-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .card {
            background: white;
            border-radius: 16px;
            box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);
            padding: 24px;
            margin-bottom: 24px;
            transition: transform 0.2s ease;
        }

        .card:hover {
            transform: translateY(-2px);
        }

        h1, h2, h3 {
            color: var(--gray-800);
            margin-bottom: 1rem;
        }

        h1 {
            font-size: 2rem;
            background: linear-gradient(45deg, var(--primary), var(--primary-dark));
            -webkit-background-clip: text;
            color: transparent;
            margin-bottom: 2rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: var(--gray-700);
        }

        input, select, textarea {
            width: 100%;
            padding: 0.75rem;
            border: 2px solid var(--gray-200);
            border-radius: 8px;
            font-size: 1rem;
            transition: all 0.2s ease;
            background: var(--gray-50);
        }

        input:focus, select:focus, textarea:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
        }

        textarea {
            min-height: 150px;
            font-family: 'Monaco', monospace;
        }

        button {
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            border: none;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            font-size: 0.875rem;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-primary {
            background: var(--primary);
            color: white;
        }

        .btn-primary:hover {
            background: var(--primary-dark);
        }

        .btn-danger {
            background: var(--danger);
            color: white;
        }

        .btn-danger:hover {
            background: var(--danger-dark);
        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 1rem;
            border-radius: 8px;
            max-width: 300px;
            animation: slideIn 0.3s ease;
            z-index: 1000;
        }

        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        .success {
            background: var(--success);
            color: white;
        }

        .error {
            background: var(--danger);
            color: white;
        }

        .prompt-files-container {
            position: relative;
        }

        .prompt-file {
            display: none;
        }

        .prompt-file.active {
            display: block;
            animation: fadeIn 0.3s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        .prompt-navigation {
            display: flex;
            gap: 0.5rem;
            margin-bottom: 1rem;
            flex-wrap: wrap;
        }

        .prompt-nav-button {
            padding: 0.5rem 1rem;
            background: var(--gray-100);
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.875rem;
            transition: all 0.2s ease;
        }

        .prompt-nav-button.active {
            background: var(--primary);
            color: white;
        }

        @media (max-width: 768px) {
            .app-container {
                padding: 16px;
            }

            .card {
                padding: 16px;
                border-radius: 12px;
            }

            h1 {
                font-size: 1.5rem;
            }

            button {
                width: 100%;
                margin-bottom: 0.5rem;
            }
        }
    </style>
</head>
<body>
    <div id="notification" class="notification"></div>

    <div class="app-container">
        <div class="card">
            <h1>Bot Configuration Manager</h1>

            <h2>Configuration Settings</h2>
            <div class="form-group">
                <label>Allowed Users:</label>
                <input type="text" id="allowed_users" value="{{ config['allowed_users']|join(',') }}" placeholder="Enter comma-separated usernames">
            </div>

            <div class="form-group">
                <label>Gemini Model:</label>
                <input type="text" id="gemini_model" value="{{ config['gemini_model'] }}" placeholder="Enter model name">
            </div>

            <h3>Generation Config</h3>
            <div class="form-group">
                <label>Temperature:</label>
                <input type="number" id="temperature" value="{{ config['generation_config']['temperature'] }}" step="0.1" min="0" max="1">
            </div>
            <div class="form-group">
                <label>Top P:</label>
                <input type="number" id="top_p" value="{{ config['generation_config']['top_p'] }}" step="0.1" min="0" max="1">
            </div>
            <div class="form-group">
                <label>Top K:</label>
                <input type="number" id="top_k" value="{{ config['generation_config']['top_k'] }}">
            </div>
            <div class="form-group">
                <label>Max Output Tokens:</label>
                <input type="number" id="max_output_tokens" value="{{ config['generation_config']['max_output_tokens'] }}">
            </div>

            <h3>Safety Settings</h3>
            {% for category, level in config['safety_settings'].items() %}
            <div class="form-group">
                <label>{{ category }}:</label>
                <select id="{{ category }}">
                    <option value="BLOCK_NONE" {% if level == 'BLOCK_NONE' %}selected{% endif %}>BLOCK_NONE</option>
                    <option value="BLOCK_ONLY_HIGH" {% if level == 'BLOCK_ONLY_HIGH' %}selected{% endif %}>BLOCK_ONLY_HIGH</option>
                    <option value="BLOCK_MEDIUM_AND_ABOVE" {% if level == 'BLOCK_MEDIUM_AND_ABOVE' %}selected{% endif %}>BLOCK_MEDIUM_AND_ABOVE</option>
                    <option value="BLOCK_LOW_AND_ABOVE" {% if level == 'BLOCK_LOW_AND_ABOVE' %}selected{% endif %}>BLOCK_LOW_AND_ABOVE</option>
                    <option value="HARM_BLOCK_THRESHOLD_UNSPECIFIED" {% if level == 'HARM_BLOCK_THRESHOLD_UNSPECIFIED' %}selected{% endif %}>HARM_BLOCK_THRESHOLD_UNSPECIFIED</option>                                        
                </select>
            </div>
            {% endfor %}

            <button class="btn-primary" onclick="saveConfig()">üíæ Save Configuration</button>
        </div>

        <div class="card">
            <h2>System Prompts</h2>

            <div class="form-group">
                <label>Current System Prompt:</label>
                <select id="system_prompt_file" onchange="updateSystemPromptFile(this.value)">
                    <!-- {% for file in prompt_files %} -->
                    <!-- <option value="{{ file }}" {% if file == config['system_prompt_file'] %}selected{% endif %}>{{ file }}</option> -->
                    <!-- {% endfor %} -->
                    {% for file in prompt_files %}
                    <option value="{{ file }}" {% if file == 'telegramV3.txt' %}selected{% endif %}>{{ file }}</option>
                    {% endfor %}
                </select>
            </div>

            <div class="prompt-files-container">
                <div class="prompt-navigation">
                    {% for file in prompt_files %}
                    <button class="prompt-nav-button" onclick="showPromptFile('{{ file }}')">{{ file }}</button>
                    {% endfor %}
                </div>

                {% for file in prompt_files %}
                <div id="prompt_{{ file }}" class="prompt-file">
                    <h4>{{ file }}</h4>
                    <div class="form-group">
                        <textarea id="content_{{ file }}">{{ prompt_contents[file] }}</textarea>
                    </div>
                    <button class="btn-primary" onclick="savePromptFile('{{ file }}')">üíæ Save</button>
                    <button class="btn-danger" onclick="deletePromptFile('{{ file }}')">üóëÔ∏è Delete</button>
                </div>
                {% endfor %}
            </div>

            <h3>Add New Prompt File</h3>
            <div class="form-group">
                <label>Filename:</label>
                <input type="text" id="new_filename" placeholder="Enter filename (e.g., new_prompt.txt)">
            </div>
            <div class="form-group">
                <label>Content:</label>
                <textarea id="new_content" placeholder="Enter prompt content"></textarea>
            </div>
            <button class="btn-primary" onclick="addPromptFile()">‚ûï Add File</button>
        </div>
    </div>

    <script>
        // Show the first prompt file by default
        document.addEventListener('DOMContentLoaded', () => {
            const firstPrompt = document.querySelector('.prompt-file');
            if (firstPrompt) {
                firstPrompt.classList.add('active');
                const firstButton = document.querySelector('.prompt-nav-button');
                if (firstButton) firstButton.classList.add('active');
            }
        });

        function showPromptFile(filename) {
            // Hide all prompt files and deactivate all buttons
            document.querySelectorAll('.prompt-file').forEach(el => el.classList.remove('active'));
            document.querySelectorAll('.prompt-nav-button').forEach(el => el.classList.remove('active'));

            // Show selected prompt file and activate corresponding button
            document.getElementById('prompt_' + filename).classList.add('active');
            document.querySelector(`.prompt-nav-button[onclick*="${filename}"]`).classList.add('active');
        }

        function showNotification(message, isError = false) {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.className = 'notification ' + (isError ? 'error' : 'success');
            notification.style.display = 'block';
            setTimeout(() => {
                notification.style.display = 'none';
            }, 3000);
        }

        // Keep existing function implementations
        function saveConfig() {
            const config = {
                allowed_users: document.getElementById('allowed_users').value.split(',').map(s => s.trim()),
                gemini_model: document.getElementById('gemini_model').value,
                generation_config: {
                    temperature: parseFloat(document.getElementById('temperature').value),
                    top_p: parseFloat(document.getElementById('top_p').value),
                    top_k: parseInt(document.getElementById('top_k').value),
                    max_output_tokens: parseInt(document.getElementById('max_output_tokens').value),
                    response_mime_type: "text/plain"
                },
                safety_settings: {
                    HARM_CATEGORY_HATE_SPEECH: document.getElementById('HARM_CATEGORY_HATE_SPEECH').value,
                    HARM_CATEGORY_HARASSMENT: document.getElementById('HARM_CATEGORY_HARASSMENT').value,
                    HARM_CATEGORY_SEXUALLY_EXPLICIT: document.getElementById('HARM_CATEGORY_SEXUALLY_EXPLICIT').value,
                    HARM_CATEGORY_DANGEROUS_CONTENT: document.getElementById('HARM_CATEGORY_DANGEROUS_CONTENT').value
                },
                system_prompt_file: 'system/' + document.getElementById('system_prompt_file').value
            };

            fetch('/save_config', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(config)
            })
            .then(response => response.json())
            .then(data => {
                showNotification(data.message, !data.success);
            });
        }

        function savePromptFile(filename) {
            const content = document.getElementById('content_' + filename).value;
            fetch('/save_prompt', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({filename, content})
            })
            .then(response => response.json())
            .then(data => {
                showNotification(data.message, !data.success);
            });
        }

        function deletePromptFile(filename) {
            if (!confirm('Are you sure you want to delete this file?')) return;

            fetch('/delete_prompt', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({filename})
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    showNotification(data.message, true);
                }
            });
        }

        function addPromptFile() {
            const filename = document.getElementById('new_filename').value;
            const content = document.getElementById('new_content').value;

            if (!filename) {
                showNotification('Please enter a filename', true);
                return;
            }

            fetch('/add_prompt', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({filename, content})
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    showNotification(data.message, true);
                }
            });
        }

        function updateSystemPromptFile(filename) {
            fetch('/update_system_prompt', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({filename})
            })
            .then(response => response.json())
            .then(data => {
                showNotification(data.message, !data.success);
            });
        }
    </script>
</body>
</html>
